<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd">

  <!-- Configuration for how to send spans to Zipkin -->
  <bean id="sender" class="zipkin2.reporter.beans.OkHttpSenderFactoryBean">
    <property name="endpoint" value="http://localhost:9411/api/v2/spans"/>
  </bean>

  <!-- Configuration for how to buffer spans into messages for Zipkin -->
  <bean id="spanReporter" class="zipkin2.reporter.beans.AsyncReporterFactoryBean">
    <property name="encoder" value="JSON_V2"/>
    <property name="sender" ref="sender"/>
    <!-- wait up to half a second for any in-flight spans on close -->
    <property name="closeTimeout" value="500"/>
  </bean>

  <!-- Defines a propagated field "userName" that uses the remote header "user-name" -->
  <bean id="userNameBaggageField" class="brave.baggage.BaggageField" factory-method="create">
    <constructor-arg value="userName" />
  </bean>
  <bean id="propagationFactory" class="brave.spring.beans.BaggagePropagationFactoryBean">
    <property name="configs">
      <bean class="brave.spring.beans.SingleBaggageFieldFactoryBean">
        <property name="field" ref="userNameBaggageField" />
        <property name="keyNames" value="user-name" />
      </bean>
    </property>
  </bean>

  <!-- Allows log patterns to use %{traceId} %{spanId} and %{userName} -->
  <bean id="correlationScopeDecorator" class="brave.spring.beans.CorrelationScopeDecoratorFactoryBean">
    <property name="builder">
      <bean class="brave.context.log4j12.MDCScopeDecorator" factory-method="newBuilder"/>
    </property>
    <property name="configs">
      <list>
        <bean class="brave.spring.beans.SingleCorrelationFieldFactoryBean">
          <property name="baggageField">
            <util:constant static-field="brave.baggage.BaggageFields.TRACE_ID"/>
          </property>
        </bean>
        <bean class="brave.spring.beans.SingleCorrelationFieldFactoryBean">
          <property name="baggageField">
            <util:constant static-field="brave.baggage.BaggageFields.SPAN_ID"/>
          </property>
        </bean>
        <bean class="brave.spring.beans.SingleCorrelationFieldFactoryBean">
          <property name="baggageField" ref="userNameBaggageField"/>
        </bean>
      </list>
    </property>
  </bean>

  <!-- allows us to read the service name from spring config -->
  <context:property-placeholder/>

  <!-- Controls aspects of tracing such as the service name that shows up in the UI -->
  <bean id="tracing" class="brave.spring.beans.TracingFactoryBean">
    <property name="localServiceName" value="${zipkin.service:brave-webmvc-example}"/>
    <property name="propagationFactory" ref="propagationFactory"/>
    <property name="currentTraceContext">
      <bean class="brave.spring.beans.CurrentTraceContextFactoryBean">
        <property name="scopeDecorators" ref="correlationScopeDecorator"/>
      </bean>
    </property>
    <property name="spanReporter" ref="spanReporter"/>
  </bean>

  <!-- Allows someone to add tags to a span if a trace is in progress, via SpanCustomizer -->
  <bean id="spanCustomizer" class="brave.CurrentSpanCustomizer" factory-method="create">
    <constructor-arg index="0" ref="tracing"/>
  </bean>

  <!-- Decides how to name and tag spans. By default they are named the same as the http method. -->
  <bean id="httpTracing" class="brave.spring.beans.HttpTracingFactoryBean">
    <property name="tracing" ref="tracing"/>
  </bean>
</beans>
